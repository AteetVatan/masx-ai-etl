name: Build & Publish â€¢ MASX-ETL (RunPod Serverless GPU)

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive image name (lowercase)
        id: names
        run: |
          REPO_LC="${GITHUB_REPOSITORY,,}"
          echo "repo_lc=$REPO_LC" >> "$GITHUB_OUTPUT"
          echo "image=${{ env.REGISTRY }}/${REPO_LC}-masx-etl-gpu" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.names.outputs.image }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
            type=ref,event=tag
            type=raw,value={{date 'YYYYMMDD'}}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created={{date 'iso8601'}}
            org.opencontainers.image.title=MASX-ETL
            org.opencontainers.image.description=Serverless ETL for MASX on RunPod (Playwright+CUDA)

      - name: Build & Push (cached)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          provenance: false
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show published tags
        run: |
          echo "Image: ${{ steps.names.outputs.image }}"
          echo "Tags:"
          echo "${{ steps.meta.outputs.tags }}"

      # Warm only on main; secrets are checked inside the step
      - name: Warm RunPod endpoint (main only)
        if: ${{ github.ref == 'refs/heads/main' }}
        continue-on-error: true
        env:
          RP_ENDPOINT: ${{ secrets.RUNPOD_ENDPOINT_ID }}
          RP_API_KEY:  ${{ secrets.RUNPOD_API_KEY }}
        run: |
          if [ -z "${RP_ENDPOINT}" ] || [ -z "${RP_API_KEY}" ]; then
            echo "Warm step skipped: secrets missing."
            exit 0
          fi
          echo "Warming RunPod endpoint ${RP_ENDPOINT} ..."
          curl -fsSL -X POST "https://api.runpod.ai/v2/${RP_ENDPOINT}/runsync" \
            -H "Authorization: Bearer ${RP_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"input":{"mode":"warm"}}'
